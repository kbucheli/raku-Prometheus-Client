=begin pod

=head1 NAME

Prometheus::Client::Metrics::StateSet - a collector for synthetic stateset metrics

=head1 SYNOPSIS

    use Prometheus::Client :metrics;

    enum SystemStates <Stopped Starting Running Quitting Error>;

    my $state-set;
    my $m = METRICS {
        $state-set state-set 'proc_status', 'status of proc',
            states => SystemStates.enum.keys,
            ;
    }

    start {
        loop {
            $state-set.state: check-state();
        }
    }

=head1 DESCRIPTION

An object of this class provides a collector that returns a single state-set metric. State-set metrics are synthetic metric, in that it returns a number of gauges, one for each given state. The values are set to 0 or 1 depending on which state is current.

=head1 METHODS

=head2 method new

    method new(
        MetricName:D :$name!,
        MetricName :$namespace,
        MetricName :$subsystem,
        MetricName :$unit,
        Str:D :$documentation!,
        :@state!,
        --> Prometheus::Client::Metrics::Info:D
    )

Returns a new info metric collector. The C<$name> and C<$documentation> are required. You must provide a list of states.

=head2 method state

    method state($state)

Sets the current state to C<$state>. This oepration is thread-safe.

=head2 method full-name

    method full-name(--> MetricName:D)

This returns the full name of the metric. If all name parts are provided, this will be formatted as:

    "namespace_subsystem_name_unit"

Omitted parts will be left out.

=head2 method type

    method type(--> MetricType:D)

Always returned "stateset".

=head2 method describe

    method describe(--> Seq:D)

Returns a sequence of metrics with no samples attached.

=head2 method collect

    method collect(--> Seq:D)

Returns a sequence of metrics with samples for collection.

=end pod
